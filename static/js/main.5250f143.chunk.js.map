{"version":3,"sources":["utils/setup-firebase.js","constants/index.js","Modal/index.jsx","App/index.jsx","App/selectors.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","projectId","firestore","firebasedb","database","STATUS_MAP","1","2","3","4","5","6","STATUS_DISPLAY","map","status","index","value","text","Meta","SenatorModal","senator","visible","closeModal","title","displayName","party","onOk","onCancel","hoverable","style","width","cover","alt","src","govtrack_id","description","className","quote","contact","address","phone","socials","twitter","target","href","TwitterOutlined","facebook","FacebookOutlined","url","urls","LinkOutlined","Column","makeSortFunction","ColumnGroup","key","a","b","App","state","senators","modalSenator","componentDidMount","ref","once","then","snapshot","townHalls","forEach","node","push","val","setState","collection","get","data","id","sort","scrollTo","console","log","document","querySelector","scrollIntoView","behavior","renderModal","thisTownhalls","filter","officePersonId","openModal","senateMapByStatus","this","reduce","acc","cur","statusKey","statusNo","flex","content","toLowerCase","join","onClick","gutter","dataSource","rowKey","pagination","sticky","scroll","x","y","dataIndex","sorter","filters","onFilter","record","includes","render","Component","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5250f143.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/database';\n\n// const config = {\n//     apiKey: 'AIzaSyDwZ41RWIytGELNBnVpDr7Y_k1ox2F2Heg',\n//     authDomain: 'townhallproject-86312.firebaseapp.com',\n//     databaseURL: 'https://townhallproject-86312.firebaseio.com',\n//     storageBucket: 'townhallproject-86312.appspot.com',\n//     messagingSenderId: '208752196071',\n//     projectId: 'townhallproject-86312',\n// };\n\nconst config = {\n    apiKey: 'AIzaSyCJncx2G6bUnecl4H2VHSBTDfRRxg7H5Fs',\n    authDomain: 'townhalltestingsms.firebaseapp.com',\n    databaseURL: 'https://townhalltestingsms.firebaseio.com',\n    storageBucket: 'townhalltestingsms.appspot.com',\n    messagingSenderId: '86976100332',\n    projectId: 'townhalltestingsms',\n};\n\nfirebase.initializeApp(config);\nconst firestore = firebase.firestore();\nconst firebasedb = firebase.database();\n\nexport {\n    firebase,\n    firebasedb,\n    firestore\n};","export const STATUS_TYPES = [\n    \"Do not consider nominee until new Congress in 2021\", \n    \"Consider nominee but only after Election\", \n    \"Consider new nominee\", \n    \"Not on record\", \n    \"Other status\",\n    \"Unknown\"\n]\n\nexport const STATUS_MAP = {\n    1: \"Do not consider nominee until new Congress in 2021\",\n    2: \"Consider nominee but only after Election\",\n    3: \"Consider new nominee\",\n    4: \"Not on record\",\n    5: \"Other status\",\n    6: \"Unknown\"\n}\n\nexport const STATUS_DISPLAY = STATUS_TYPES.map((status, index) => {\n    return {\n        value: index,\n        text: status,\n    }\n})","import React from \"react\";\nimport { Modal, Card } from \"antd\";\nimport {\n  FacebookOutlined,\n  TwitterOutlined,\n  LinkOutlined,\n} from \"@ant-design/icons\";\nimport { STATUS_MAP } from \"../constants\";\n\nconst { Meta } = Card;\n\nconst SenatorModal = ({ senator, visible, closeModal }) => (\n  <>\n    <Modal\n      title={`Senator ${senator.displayName} (${senator.party[0]})`}\n      visible={visible}\n      onOk={closeModal}\n      onCancel={closeModal}\n    >\n      <Card\n        hoverable\n        style={{ width: 240 }}\n        cover={\n          <img\n            alt=\"example\"\n            src={`https://www.govtrack.us/static/legislator-photos/${senator.govtrack_id}-200px.jpeg`}\n          />\n        }\n      >\n        <Meta description={`Position: ${STATUS_MAP[senator.status]}`} />\n      </Card>\n      <div>\n        <p className=\"quote\">\n            {senator.quote.text}\n        </p>\n        <h4>Contact</h4>\n        <p>{senator.contact.address}</p>\n        <p>{senator.contact.phone}</p>\n        <p className=\"socials\">\n          {senator.socials.twitter && (\n            <a target=\"_blank\" href={`https://twitter.com/${senator.socials.twitter}`}>\n              <TwitterOutlined />\n            </a>\n          )}\n\n          {senator.socials.facebook && (\n            <a target=\"_blank\" href={`https://facebook.com/${senator.socials.facebook}`}>\n              <FacebookOutlined />\n            </a>\n          )}\n\n          {senator.socials.url && (\n            <a target=\"_blank\" href={senator.socials.urls}>\n              <LinkOutlined />\n            </a>\n          )}\n        </p>\n      </div>\n    </Modal>\n  </>\n);\n\n\nexport default SenatorModal;\n","import React, { Component } from 'react';\nimport { Col, Row, Table, Popover, Button } from \"antd\";\nimport { map, filter, find } from \"lodash\";\n\nimport { firestore, firebasedb } from '../utils/setup-firebase';\nimport { getSenatorsByStatus } from './selectors';\nimport SenatorModal from \"../Modal\";\nimport './style.css';\nimport { STATUS_DISPLAY, STATUS_MAP } from '../constants';\n\nconst { Column, ColumnGroup } = Table;\n\n\n\nconst makeSortFunction = (key) => {\n  return (a, b) => {\n        if (a[key] > b[key]) {\n            return 1;\n          }\n          if (a[key] < b[key]) {\n            return -1;\n          }\n          return 0;\n        }\n\n}\n\nclass App extends Component {\n  state = {\n    senators: [],\n    modalSenator: null,\n  };\n\n  componentDidMount = () => {\n    firebasedb\n      .ref(\"townHalls\")\n      .once(\"value\")\n      .then((snapshot) => {\n        const townHalls = [];\n        snapshot.forEach((node) => {\n          townHalls.push(node.val());\n        });\n        this.setState({ townHalls });\n      });\n    firestore\n      .collection(\"whip_count_2020\")\n      .get()\n      .then((snapshot) => {\n        const senators = [];\n        snapshot.forEach((node) => {\n          const data = {\n            ...node.data(),\n            id: node.id,\n          };\n          senators.push(data);\n        });\n        senators.sort(makeSortFunction(\"state\"));\n        this.setState({ senators });\n      });\n  };\n\n  scrollTo = (id) => {\n    console.log(id);\n    const row = document.querySelector(`[data-row-key=\"${id}\"]`);\n    row.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  renderModal = () => {\n    const { modalSenator, townHalls } = this.state;\n    if (!modalSenator) {\n      return null;\n    }\n    const thisTownhalls = filter(townHalls, {\n      officePersonId: modalSenator.id,\n    });\n    return (\n      <SenatorModal\n        visible={true}\n        senator={modalSenator}\n        townHalls={thisTownhalls}\n        closeModal={this.closeModal}\n      />\n    );\n  };\n\n  openModal = (senator) => {\n    this.setState({ modalSenator: senator });\n  };\n\n  closeModal = () => {\n    this.setState({ modalSenator: null });\n  };\n\n  render() {\n    const senateMapByStatus = getSenatorsByStatus(this.state.senators);\n    return (\n      <div className=\"App\">\n        <div className=\"team\">\n          <h1>Whip Count</h1>\n          <Row className=\"all-status-container\">\n            {map(senateMapByStatus, (senators, statusNo) => {\n              return (\n                <Col flex={\"1 1 auto\"} className=\"status-col\">\n                  <h4>{STATUS_MAP[statusNo]}</h4>\n                  <div className=\"status-container\">\n                    {map(senators, (senator) => (\n                      <Popover\n                        key={senator.id}\n                        content={\n                          <p>\n                            {senator.party} {senator.state}\n                          </p>\n                        }\n                        title={`Sen. ${senator.displayName}`}\n                      >\n                        <div\n                          className={[\n                            \"image-container\",\n                            senator.party.toLowerCase(),\n                          ].join(\" \")}\n                          onClick={() => this.scrollTo(senator.id)}\n                        >\n                          <img\n                            width={200}\n                            src={`https://www.govtrack.us/static/legislator-photos/${senator.govtrack_id}-100px.jpeg`}\n                          />\n                        </div>\n                      </Popover>\n                    ))}\n                  </div>\n                </Col>\n              );\n            })}\n          </Row>\n          <Row className=\"table-container\" gutter={16}>\n            <Table\n              dataSource={this.state.senators}\n              rowKey=\"id\"\n              pagination={false}\n              sticky\n              scroll={{\n                x: true,\n                y: \"60vh\",\n              }}\n            >\n              <Column\n                title=\"First Name\"\n                dataIndex=\"first_name\"\n                key=\"first_name\"\n              />\n              <Column\n                title=\"Last Name\"\n                dataIndex=\"last_name\"\n                key=\"last_name\"\n                sorter={makeSortFunction(\"last_name\")}\n              />\n              <Column\n                title=\"State\"\n                dataIndex=\"state\"\n                key=\"state\"\n                sorter={makeSortFunction(\"state\")}\n              />\n              <Column\n                title=\"Party\"\n                dataIndex=\"party\"\n                key=\"party\"\n                sorter={makeSortFunction(\"party\")}\n              />\n              <Column\n                title=\"Status\"\n                dataIndex=\"status\"\n                key=\"status\"\n                filters={STATUS_DISPLAY}\n                onFilter={(value, record) => record.status.includes(value)}\n                sorter={makeSortFunction(\"status\")}\n                render={(id) => {\n                  return (STATUS_MAP[id])\n                }}\n              />\n              <Column\n                title=\"See More\"\n                key=\"see-more\"\n                render={(record) => {\n                  return (\n                    <>\n                      <Button\n                        onClick={() =>\n                          this.openModal(record)\n                        }\n                      >\n                        Details\n                      </Button>\n                    </>\n                  );\n                }}\n              />\n            </Table>\n            {this.renderModal()}\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","export const getSenatorsByStatus = (allSenators) => (\n    allSenators.reduce((acc, cur) => {\n        const statusKey = cur.status\n        if (!acc[statusKey]) {\n            acc[statusKey] = [cur]\n        } else {\n            acc[statusKey].push(cur)\n        }\n        return acc;\n    }, {})\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}